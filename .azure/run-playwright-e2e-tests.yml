name: ${{ parameters.environment }}.${{ parameters.testTag }}.$(Build.SourceBranchName).$(Date:yyyyMMdd)$(Rev:.r)

trigger: none
pr: none

parameters:
  - name: testTag
    displayName: 'Test Tag'
    type: string
    default: 'Run-All-Tests'
    values:
      - 'Run-All-Tests'
      - 'Smoke'
      - 'Regression'
      - 'E2E'
      - 'Functional'
      - 'Visual'
      - 'Validation'
      - 'State-Management'

  - name: environment
    displayName: 'Environment'
    type: string
    default: 'Dev'
    values:
      - 'Dev'

  - name: playwrightWorkers
    displayName: 'Playwright Workers'
    type: number
    default: 4

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: AZURE_SUBSCRIPTION
    ${{ if eq(parameters.environment, 'Dev') }}:
      value: 'DTS-SHAREDSERVICES-DEV-Pre-Recorded Evidence'
  - name: KEYVAULT_NAME
    ${{ if eq(parameters.environment, 'Dev') }}:
      value: 'pre-hmctskv-dev'
  - name: DOCKER_IMAGE_NAME
    value: 'playwright-container'

steps:
  - checkout: self

  - task: AzureKeyVault@2
    inputs:
      azureSubscription: ${{ variables.AZURE_SUBSCRIPTION }}
      KeyVaultName: ${{ variables.KEYVAULT_NAME }}
      SecretsFilter: 'pre-power-app-base-url,pre-api-url,pre-level-1-test-login-email,pre-level-1-test-login-password,cvp-settings-base-url,cvp-conference-base-url,cvp-user-login-email,cvp-user-login-password,cvp-conference-user-email,cvp-service-id,cvp-location-code'
    displayName: 'Fetch secrets from Azure Key Vault'

  - script: |
      yarn build-container
    displayName: 'Build Docker Image'

  - script: |
      if [ "${{ parameters.testTag }}" = "Run-All-Tests" ]; then
        export PLAYWRIGHT_COMMAND="yarn playwright test"
      else
        export PLAYWRIGHT_COMMAND="yarn playwright test --grep=@${{ lower(parameters.testTag) }}"
      fi

      docker run \
        --rm \
        -e CI=true \
        -e FUNCTIONAL_TESTS_WORKERS=${{ parameters.playwrightWorkers }} \
        -e BASE_URL=$PRE_POWER_APP_BASE_URL \
        -e API_URL=$PRE_API_URL \
        -e PRE_LEVEL_1_USER_EMAIL=$PRE_LEVEL_1_TEST_LOGIN_EMAIL \
        -e PRE_LEVEL_1_USER_PASSWORD=$PRE_LEVEL_1_TEST_LOGIN_PASSWORD \
        -e CVP_SETTINGS_BASE_URL=$CVP_SETTINGS_BASE_URL \
        -e CVP_CONFERENCE_BASE_URL=$CVP_CONFERENCE_BASE_URL \
        -e CVP_USER_EMAIL=$CVP_USER_LOGIN_EMAIL \
        -e CVP_USER_PASSWORD=$CVP_USER_LOGIN_PASSWORD \
        -e CVP_CONFERENCE_USER_EMAIL=$CVP_CONFERENCE_USER_EMAIL \
        -e CVP_SERVICE_ID=$CVP_SERVICE_ID \
        -e CVP_LOCATION_CODE=$CVP_LOCATION_CODE \
        -v $(Pipeline.Workspace)/playwright-report:/playwright/playwright-report \
        $(DOCKER_IMAGE_NAME) \
        /bin/bash -c "$PLAYWRIGHT_COMMAND"
    displayName: 'Run Playwright tests in Docker'
    condition: succeededOrFailed() 

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)/playwright-report'
      artifact: 'PlaywrightHTMLReport'
      publishLocation: 'pipeline'
    displayName: 'Publish Playwright HTML Report and assets'
    condition: succeededOrFailed()