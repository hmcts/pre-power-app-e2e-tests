name: $(Build.SourceBranchName)_${{ parameters.environment }}_${{ parameters.testTag }}_$(Date:yyyyMMdd)$(Rev:.r)

trigger: none
pr: none

parameters:
  - name: testTag
    displayName: 'Test Tag'
    type: string
    default: 'all'
    values:
      - 'all'
      - 'smoke'
      - 'regression'
      - 'e2e'
      - 'functional'
      - 'visual'
      - 'validation'
      - 'state-management'

  - name: environment
    displayName: 'Environment'
    type: string
    default: 'dev'
    values:
      - 'dev'

  - name: playwrightWorkers
    displayName: 'Playwright Workers'
    type: number
    default: 4

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: AZURE_SUBSCRIPTION
    ${{ if eq(parameters.environment, 'dev') }}:
      value: 'DTS-SHAREDSERVICES-DEV-Pre-Recorded Evidence'
  - name: KEYVAULT_NAME
    ${{ if eq(parameters.environment, 'dev') }}:
      value: 'pre-hmctskv-dev'

steps:
  - checkout: self

  - task: AzureKeyVault@2
    inputs:
      azureSubscription: ${{ variables.AZURE_SUBSCRIPTION }}
      KeyVaultName: ${{ variables.KEYVAULT_NAME }}
      SecretsFilter: 'pre-power-app-base-url,pre-api-url,pre-level-1-test-login-email,pre-level-1-test-login-password,cvp-settings-base-url,cvp-conference-base-url,cvp-user-login-email,cvp-user-login-password,cvp-conference-user-email,cvp-service-id,cvp-location-code'
    displayName: 'Fetch secrets from Azure Key Vault'

  - script: |
      echo "Writing secrets to .env ..."
      {
        printf "BASE_URL='%s'\n" "$(pre-power-app-base-url)"
        printf "API_URL='%s'\n" "$(pre-api-url)"
        printf "PRE_LEVEL_1_USER_EMAIL='%s'\n" "$(pre-level-1-test-login-email)"
        printf "PRE_LEVEL_1_USER_PASSWORD='%s'\n" "$(pre-level-1-test-login-password)"
        printf "CVP_SETTINGS_BASE_URL='%s'\n" "$(cvp-settings-base-url)"
        printf "CVP_CONFERENCE_BASE_URL='%s'\n" "$(cvp-conference-base-url)"
        printf "CVP_USER_EMAIL='%s'\n" "$(cvp-user-login-email)"
        printf "CVP_USER_PASSWORD='%s'\n" "$(cvp-user-login-password)"
        printf "CVP_CONFERENCE_USER_EMAIL='%s'\n" "$(cvp-conference-user-email)"
        printf "CVP_SERVICE_ID='%s'\n" "$(cvp-service-id)"
        printf "CVP_LOCATION_CODE='%s'\n" "$(cvp-location-code)"
      } > .env
      echo ".env file created with $(wc -l < .env) entries"
    displayName: 'Create .env file from KeyVault secrets'

  - task: NodeTool@0
    inputs:
      versionSpec: '20.x'
    displayName: 'Install Node.js'

  - script: |
      yarn install
      yarn setup
    displayName: 'Install dependencies and Playwright browsers'

  - script: |
      if [ "${{ parameters.testTag }}" = "all" ]; then
        yarn playwright test 
      else
        yarn playwright test --grep=@${{ parameters.testTag }} 
      fi
    displayName: 'Run Playwright tests'
    env:
      CI: 'true'
      FUNCTIONAL_TESTS_WORKERS: ${{ parameters.playwrightWorkers }}

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'playwright-report'
      artifact: 'PlaywrightHTMLReport'
      publishLocation: 'pipeline'
    displayName: 'Publish Playwright HTML Report and assets'
    condition: succeededOrFailed()